hist(BostonHousing2["cmedv"])
hist(BostonHousing2["cmedv"])
library(mlbench)
library(SCOUTer)
data(BostonHousing2)
s = 0
for(i in BostonHousing2){
if(is.null(i)){
s = s + 1
}
}
print(paste("Missing values: ", s))
hist(BostonHousing2["cmedv"])
library(mlbench)
library(SCOUTer)
library(mlbench)
library(SCOUTer)
hist(BostonHousing2["cmedv"])
hist(BostonHousing2["cmedv"])
hist(1:10)
library(mlbench)
library("dplyr")
library("lubridate")
library("ggplot2")
library("factoextra")
hist(BostonHousing2["cmedv"])
hist(BostonHousing2[cmedv])
print(BostonHousing2[cmedv])
print(BostonHousing2["cmedv"])
print(BostonHousing2["cmedv"])
hist(BostonHousing2["cmedv"])
library(mlbench)
library(dplyr)
library(lubridate)
library(ggplot2)
library(factoextra)
print(BostonHousing2["cmedv"])
hist(BostonHousing2["cmedv"])
ggplot(BostonHousing2["cmedv"])
ggplot(data = BostonHousing2["cmedv"])
?ggplot
a.frame(x = 1:10, y = 1:10)
= 1:10)
df = data.frame("fx" = 1:10, "fy" = 1:10)
print(df)
df = data.frame("x" = 1:10, "fy" = 1:10)
print(df)
df = data.frame("x" = 1:10, "y" = 1:10)
print(df)
df = data.frame("x" = 1:10, "y" = 1:10)
ggplot(df, aes(x = df.x, y = df.y)) + geom_point()
df = data.frame("x" = 1:10, "y" = 1:10)
ggplot(df, aes(x = x, y = y)) + geom_point()
df = data.frame("x" = 1:10, "y" = 1:10)
ggplot(df, aes(x = x, y = y), colours = species) + geom_point()
df = data.frame("x" = 1:10, "y" = 1:10)
ggplot(df, aes(x = x, y = y), colours = species) + geom_point()
iris
df = data.frame("x" = 1:10, "y" = 1:10)
ggplot(iris, aes(x = Sepal.Lenght, y = Sepal.Width), colours = species) + geom_point()
df = data.frame("x" = 1:10, "y" = 1:10)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width), colours = species) + geom_point()
iris
df = data.frame("x" = 1:10, "y" = 1:10)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width), colour = species) + geom_point()
df = data.frame("x" = 1:10, "y" = 1:10)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width), colour = Species) + geom_point()
df = data.frame("x" = 1:10, "y" = 1:10)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) + geom_point()
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram()
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram(bins = 30)
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram(bins = 30) + geom_density()
ggplot(BostonHousing2, aes(x = cmedv)) } + geom_density()
ggplot(BostonHousing2, aes(x = cmedv)) + geom_density()
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram(bins = 30) + geom_density()
ggplot(BostonHousing2, aes(x = cmedv)) + geom_density() + geom_histogram(bins = 30)
ggplot(BostonHousing2, aes(x = cmedv)) + geom_density()
?geom_density
ggplot(BostonHousing2, aes(x = cmedv)) + geom_density(aes(colour="red"))
ggplot(BostonHousing2, aes(x = cmedv)) + geom_density(aes(colour="red")) + geom_histogram()
ggplot(BostonHousing2, aes(x = cmedv)) + geom_density(aes(colour="red")) + geom_histogram(bins = 30)
ggplot(BostonHousing2, aes(x = cmedv)) + geom_density(aes(colour="red")) + geom_histogram(bins = 30, aes(colour("blue")))
ggplot(BostonHousing2, aes(x = cmedv)) + geom_density(aes(colour="red")) + geom_histogram(bins = 30, aes(colour("red")))
?geom_histogram
?geom_histogram
ggplot(BostonHousing2, aes(x = cmedv))
+ geom_density(aes(colour=1))
ggplot(BostonHousing2, aes(x = cmedv))
+ geom_density(aes(colour="red"))
ggplot(BostonHousing2, aes(x = cmedv)) + geom_density(aes(colour="red"))
ggplot(BostonHousing2, aes(x = cmedv)) + geom_density(aes(colour="red")) + geom_histogram(aes(colour="red"))
ggplot(BostonHousing2, aes(x = cmedv)) + geom_density(aes(colour="red")) + geom_histogram(aes(colour="blue"))
ggplot(BostonHousing2, aes(x = cmedv)) + geom_density(aes(colour="red")) + geom_histogram(aes(colour="yellow"))
ggplot(BostonHousing2, aes(x = cmedv)) + geom_density(aes(colour="red")) + geom_histogram(aes(colour="yellow"), fill = "white")
ggplot(BostonHousing2, aes(x = cmedv)) + geom_density(aes(colour="red")) + geom_histogram(aes(colour="yellow"), fill = "white", bins = 30)
ggplot(BostonHousing2, aes(x = cmedv)) + geom_density(aes(colour="red")) + geom_histogram(aes(colour="yellow"), fill = cut, bins = 30)
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram(aes(colour="yellow"), fill = "white", bins = 30) + geom_density(aes(colour="red"))
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram(aes(colour="yellow"), fill = "white", bins = 30) + geom_density()
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram(fill = "white", bins = 30) + geom_density(aes(colour="red"))
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram(aes(colour="yellow"), fill = "white", bins = 30) + geom_density(aes(colour="red"))
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram(aes(colour="yellow"), fill = "white", bins = 30) + geom_density(aes(colour="red"), size = 1.5)
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram()
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram() + geom_density(col="red")
library(mlbench)
library(dplyr)
library(lubridate)
library(ggplot2)
library(factoextra)
data(BostonHousing2)
s = 0
for(i in BostonHousing2){
if(is.null(i)){
s = s + 1
}
}
print(paste("Missing values: ", s))
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram() + geom_density(col="red")
library(mlbench)
library(dplyr)
library(lubridate)
library(ggplot2)
library(factoextra)
data(BostonHousing2)
s = 0
for(i in BostonHousing2){
if(is.null(i)){
s = s + 1
}
}
print(paste("Missing values: ", s))
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram() + geom_density(col="red")
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram(aes(y = stat(density))) + geom_density(col="red")
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram(aes(y = stat(cout))) + geom_density(col="red")
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram(aes(y = stat(density))) + geom_density(col="red")
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram(bins = 30, aes(y = stat(density))) + geom_density(col="red")
?stat
cor(BostonHousing2)
?cor
cor(x = BostonHousing2[2:])
cor(x = BostonHousing2[2:-1])
cor(x = BostonHousing2[2:4])
cor(x = BostonHousing2[2:lenght(BostonHousing2)])
cor(x = BostonHousing2[2:length(BostonHousing2)])
names(BostonHousing2)
print(BostonHousing2)
cor(x = BostonHousing2[2:length(BostonHousing2)-1])
cor(x = BostonHousing2[2:10])
cor(x = BostonHousing2[2:4])
cor(x = BostonHousing2[2:5])
cor(x = BostonHousing2[2:6])
cor(x = BostonHousing2[2:8])
cor(x = BostonHousing2[2:9])
cor(x = BostonHousing2[2:10])
cor(x = BostonHousing2[2:9])
print(BostonHousing2)
cor(x = BostonHousing2[2:9])
?int
?fcrt
?frct
?fctr
cor(x = BostonHousing2)
?%in%
for(i in BostonHousing2["town"]){
s = set()
if(!is.element(s, i)){
print(i)
}
}
for(i in BostonHousing2["town"]){
s = set()
if(!is.element(s, i)){
print(i)
}
}
for(i in BostonHousing2["town"]){
se = set()
if(!is.element(s, i)){
print(i)
}
}
for(i in BostonHousing2["town"]){
set = c()
if(!is.element(s, i)){
print(i)
}
}
for(i in BostonHousing2["town"]){
set = c()
if(!is.element(s, i)){
print(i)
}
}
for(i in BostonHousing2["town"]){
set = c()
if(!is.element(s, i)){
print(i)
append(set, i)
}
}
for(i in BostonHousing2["town"]){
set = c()
if(!is.element(s, i)){
print(i)
append(set, i)
}
}
?append
set = c()
for(i in BostonHousing2["town"]){
if(!is.element(s, i)){
print(i)
append(set, i)
}
}
set = c()
for(i in BostonHousing2["town"]){
if(!is.element(s, i)){
append(set, i)
}
}
print(set)
set = c()
for(i in BostonHousing2["town"]){
if(!is.element(s, i)){
append(set, i)
}
}
print(set)
set = c()
for(i in BostonHousing2["town"]){
if(!is.element(s, i)){
print(i)
append(set, i)
}
}
print(set)
set = c("f")
for(i in BostonHousing2["town"]){
if(!is.element(s, i)){
print(i)
append(set, i)
}
}
print(set)
?set
??set
library(mlbench)
library(dplyr)
library(lubridate)
library(ggplot2)
library(factoextra)
library(sets)
library(ggcorrplot)
library(caret)
library(car)
data(BostonHousing2)
s = 0
for(i in BostonHousing2){
if(is.null(i)){
s = s + 1
}
}
print(paste("Missing values: ", s))
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram(bins = 30, aes(y = stat(density))) + geom_density(col="red")
bostonHousingAllNumeric = BostonHousing2
bostonHousingAllNumeric$town = as.numeric(bostonHousingAllNumeric$town)
bostonHousingAllNumeric$chas = as.numeric(bostonHousingAllNumeric$chas)
bostonHousingAllNumeric
ggcorrplot(cor(bostonHousingAllNumeric), lab = TRUE, lab_size = 3)
ggplot(bostonHousingAllNumeric, aes(x = rm, y = cmedv)) + geom_point()
ggplot(bostonHousingAllNumeric, aes(x = lstat, y = cmedv)) + geom_point()
trainingTestingData = data.frame(rm = BostonHousing2$rm,
lstat = BostonHousing2$lstat,
cmedv = BostonHousing2$cmedv)
trainTestIndex = createDataPartition(trainingTestingData$rm, p = 0.8, list = FALSE)
print(trainingTestingData[trainTestIndex,])
print(trainingTestingData[-trainTestIndex,])
linearRegression = lm(formula = cmedv ~ rm + lstat, data = trainingTestingData[trainTestIndex,])
summary(linearRegression)
avPlots(linearRegression)
testResults = predict(linearRegression, trainingTestingData[-trainTestIndex,])
data.frame(predicted = testResults, realValues = trainingTestingData[-trainTestIndex,])
View(BostonHousing2)
ggplot(bostonHousingAllNumeric, aes(x = rm, y = lon)) + geom_point()
BostonHousing2
ggplot(bostonHousingAllNumeric, aes(x = rm, y = town)) + geom_point()
data(BostonHousing2)
BostonHousing2
library(mlbench)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
data(BostonHousing2)
BostonHousing2
BostonHousing2
s = 0
for(i in BostonHousing2){
if(is.null(i)){
s = s + 1
}
}
print(paste("Missing values: ", s))
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram(bins = 30, aes(y = stat(density))) + geom_density(col="red")
bostonHousingAllNumeric = BostonHousing2
bostonHousingAllNumeric$town = as.numeric(bostonHousingAllNumeric$town)
bostonHousingAllNumeric$chas = as.numeric(bostonHousingAllNumeric$chas)
bostonHousingAllNumeric
ggcorrplot(cor(bostonHousingAllNumeric), lab = TRUE, lab_size = 3)
ggplot(bostonHousingAllNumeric, aes(x = rm, y = cmedv)) + geom_point()
ggplot(bostonHousingAllNumeric, aes(x = lstat, y = cmedv)) + geom_point()
trainingTestingData = data.frame(rm = BostonHousing2$rm,
lstat = BostonHousing2$lstat,
cmedv = BostonHousing2$cmedv)
trainTestIndex = createDataPartition(trainingTestingData$rm, p = 0.8, list = FALSE)
library(mlbench)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(mlbench)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(caret)
library(mlbench)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(caret)
library(mlbench)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(caret)
data(BostonHousing2)
BostonHousing2
BostonHousing2
s = 0
for(i in BostonHousing2){
if(is.null(i)){
s = s + 1
}
}
print(paste("Missing values: ", s))
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram(bins = 30, aes(y = stat(density))) + geom_density(col="red")
bostonHousingAllNumeric = BostonHousing2
bostonHousingAllNumeric$town = as.numeric(bostonHousingAllNumeric$town)
bostonHousingAllNumeric$chas = as.numeric(bostonHousingAllNumeric$chas)
bostonHousingAllNumeric
ggcorrplot(cor(bostonHousingAllNumeric), lab = TRUE, lab_size = 3)
ggplot(bostonHousingAllNumeric, aes(x = rm, y = cmedv)) + geom_point()
ggplot(bostonHousingAllNumeric, aes(x = lstat, y = cmedv)) + geom_point()
trainingTestingData = data.frame(rm = BostonHousing2$rm,
lstat = BostonHousing2$lstat,
cmedv = BostonHousing2$cmedv)
trainTestIndex = createDataPartition(trainingTestingData$rm, p = 0.8, list = FALSE)
print(trainingTestingData[trainTestIndex,])
print(trainingTestingData[-trainTestIndex,])
linearRegression = lm(formula = cmedv ~ rm + lstat, data = trainingTestingData[trainTestIndex,])
summary(linearRegression)
avPlots(linearRegression)
library(mlbench)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(caret)
library(car)
data(BostonHousing2)
BostonHousing2
BostonHousing2
s = 0
for(i in BostonHousing2){
if(is.null(i)){
s = s + 1
}
}
print(paste("Missing values: ", s))
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram(bins = 30, aes(y = stat(density))) + geom_density(col="red")
bostonHousingAllNumeric = BostonHousing2
bostonHousingAllNumeric$town = as.numeric(bostonHousingAllNumeric$town)
bostonHousingAllNumeric$chas = as.numeric(bostonHousingAllNumeric$chas)
bostonHousingAllNumeric
ggcorrplot(cor(bostonHousingAllNumeric), lab = TRUE, lab_size = 3)
ggplot(bostonHousingAllNumeric, aes(x = rm, y = cmedv)) + geom_point()
ggplot(bostonHousingAllNumeric, aes(x = lstat, y = cmedv)) + geom_point()
trainingTestingData = data.frame(rm = BostonHousing2$rm,
lstat = BostonHousing2$lstat,
cmedv = BostonHousing2$cmedv)
trainTestIndex = createDataPartition(trainingTestingData$rm, p = 0.8, list = FALSE)
print(trainingTestingData[trainTestIndex,])
print(trainingTestingData[-trainTestIndex,])
linearRegression = lm(formula = cmedv ~ rm + lstat, data = trainingTestingData[trainTestIndex,])
summary(linearRegression)
avPlots(linearRegression)
testResults = predict(linearRegression, trainingTestingData[-trainTestIndex,])
data.frame(predicted = testResults, realValues = trainingTestingData[-trainTestIndex,])
library(mlbench)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(caret)
library(car)
library(mlbench)
library(dplyr)
library(ggplot2)
library(ggcorrplot)
library(caret)
library(car)
data(BostonHousing2)
BostonHousing2
BostonHousing2
s = 0
for(i in BostonHousing2){
if(is.null(i)){
s = s + 1
}
}
print(paste("Missing values: ", s))
ggplot(BostonHousing2, aes(x = cmedv)) + geom_histogram(bins = 30, aes(y = stat(density))) + geom_density(col="red")
bostonHousingAllNumeric = BostonHousing2
bostonHousingAllNumeric$town = as.numeric(bostonHousingAllNumeric$town)
bostonHousingAllNumeric$chas = as.numeric(bostonHousingAllNumeric$chas)
bostonHousingAllNumeric
ggcorrplot(cor(bostonHousingAllNumeric), lab = TRUE, lab_size = 3)
ggplot(bostonHousingAllNumeric, aes(x = rm, y = cmedv)) + geom_point()
ggplot(bostonHousingAllNumeric, aes(x = lstat, y = cmedv)) + geom_point()
trainingTestingData = data.frame(rm = BostonHousing2$rm,
lstat = BostonHousing2$lstat,
cmedv = BostonHousing2$cmedv)
trainTestIndex = createDataPartition(trainingTestingData$rm, p = 0.8, list = FALSE)
print(trainingTestingData[trainTestIndex,])
print(trainingTestingData[-trainTestIndex,])
linearRegression = lm(formula = cmedv ~ rm + lstat, data = trainingTestingData[trainTestIndex,])
summary(linearRegression)
avPlots(linearRegression)
testResults = predict(linearRegression, trainingTestingData[-trainTestIndex,])
data.frame(predicted = testResults, realValues = trainingTestingData[-trainTestIndex,])
